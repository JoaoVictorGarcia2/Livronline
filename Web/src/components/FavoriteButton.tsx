// src/components/FavoriteButton.tsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import api from '../services/api';
import './../styles/FavoriteButton.css'; // <<< Crie este arquivo CSS

interface FavoriteButtonProps {
    bookId: number;
    initialIsFavorite: boolean | null | undefined; // Status inicial vindo da API
    size?: 'small' | 'normal'; // Opcional: para tamanhos diferentes
}

const FavoriteButton = ({ bookId, initialIsFavorite, size = 'normal' }: FavoriteButtonProps) => {
    const { user, isLoading: isAuthLoading } = useAuth();
    const [isFavorite, setIsFavorite] = useState(initialIsFavorite ?? false); // Estado local do cora칞칚o
    const [isLoading, setIsLoading] = useState(false); // Loading da pr칩pria a칞칚o de favoritar

    // Atualiza estado local se o estado inicial mudar (ex: ao carregar dados do livro)
    useEffect(() => {
        setIsFavorite(initialIsFavorite ?? false);
    }, [initialIsFavorite]);

    const handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {
        event.preventDefault(); // Impede navega칞칚o se o bot칚o estiver dentro de um Link
        event.stopPropagation(); // Impede que o clique propague para o Card/Link pai

        if (!user || isAuthLoading || isLoading) {
            // N칚o faz nada se deslogado, ou se auth est치 carregando, ou se j치 est치 carregando esta a칞칚o
            if(!user && !isAuthLoading) alert("Fa칞a login para adicionar aos favoritos."); // Mostra alerta se deslogado
            return;
        }

        setIsLoading(true);
        const currentlyFavorited = isFavorite; // Guarda estado atual

        // Atualiza칞칚o Otimista da UI
        setIsFavorite(!currentlyFavorited);

        try {
            if (currentlyFavorited) {
                // Se era favorito, remove
                await api.delete(`/favorites/${bookId}`);
                console.log(`Livro ${bookId} removido dos favoritos.`);
            } else {
                // Se n칚o era, adiciona
                await api.post(`/favorites/${bookId}`);
                console.log(`Livro ${bookId} adicionado aos favoritos.`);
            }
            // Sucesso: o estado otimista j치 est치 correto
        } catch (error: any) {
            console.error("Erro ao atualizar favoritos:", error.response?.data || error.message);
            // Reverte a UI em caso de erro na API
            setIsFavorite(currentlyFavorited);
            alert("Erro ao atualizar favoritos. Tente novamente.");
        } finally {
            setIsLoading(false);
        }
    };

    // N칚o renderiza o bot칚o enquanto a autentica칞칚o est치 carregando
    // ou se n칚o houver usu치rio (opcional, pode s칩 desabilitar)
    // if (isAuthLoading) return null;

    return (
        <button
            className={`favorite-button ${isFavorite ? 'active' : ''} ${size === 'small' ? 'small' : ''}`}
            onClick={handleClick}
            disabled={!user || isLoading || isAuthLoading} // Desabilita se deslogado ou carregando
            title={isFavorite ? "Remover dos Favoritos" : "Adicionar aos Favoritos"}
            aria-label={isFavorite ? "Remover dos Favoritos" : "Adicionar aos Favoritos"}
        >
            {/* 칈cone de Cora칞칚o (Unicode) */}
            {/* Poderia usar SVGs ou react-icons para 칤cones mais bonitos */}
            <span aria-hidden="true">{isFavorite ? '仇벒잺' : '游밼'}</span>
             {/* Opcional: Texto para bot칫es maiores */}
             {size === 'normal' && (
                 <span className="fav-text">{isFavorite ? ' Favorito' : ' Favoritar'}</span>
             )}
        </button>
    );
};

export default FavoriteButton;